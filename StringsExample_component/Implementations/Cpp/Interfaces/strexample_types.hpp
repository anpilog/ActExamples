/*++

Copyright (C) 2021 Strings developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file with basic types in
order to allow an easy use of String example library

Interface version: 1.0.0

*/

#ifndef __STRINGSEXAMPLE_TYPES_HEADER_CPP
#define __STRINGSEXAMPLE_TYPES_HEADER_CPP


/*************************************************************************************************************************
 Scalar types definition
**************************************************************************************************************************/

#ifdef STRINGSEXAMPLE_USELEGACYINTEGERTYPES

typedef unsigned char StringsExample_uint8;
typedef unsigned short StringsExample_uint16 ;
typedef unsigned int StringsExample_uint32;
typedef unsigned long long StringsExample_uint64;
typedef char StringsExample_int8;
typedef short StringsExample_int16;
typedef int StringsExample_int32;
typedef long long StringsExample_int64;

#else // STRINGSEXAMPLE_USELEGACYINTEGERTYPES

#include <stdint.h>

typedef uint8_t StringsExample_uint8;
typedef uint16_t StringsExample_uint16;
typedef uint32_t StringsExample_uint32;
typedef uint64_t StringsExample_uint64;
typedef int8_t StringsExample_int8;
typedef int16_t StringsExample_int16;
typedef int32_t StringsExample_int32;
typedef int64_t StringsExample_int64 ;

#endif // STRINGSEXAMPLE_USELEGACYINTEGERTYPES

typedef float StringsExample_single;
typedef double StringsExample_double;

/*************************************************************************************************************************
 General type definitions
**************************************************************************************************************************/

typedef StringsExample_int32 StringsExampleResult;
typedef void * StringsExampleHandle;
typedef void * StringsExample_pvoid;

/*************************************************************************************************************************
 Version for StringsExample
**************************************************************************************************************************/

#define STRINGSEXAMPLE_VERSION_MAJOR 1
#define STRINGSEXAMPLE_VERSION_MINOR 0
#define STRINGSEXAMPLE_VERSION_MICRO 0
#define STRINGSEXAMPLE_VERSION_PRERELEASEINFO ""
#define STRINGSEXAMPLE_VERSION_BUILDINFO ""

/*************************************************************************************************************************
 Error constants for StringsExample
**************************************************************************************************************************/

#define STRINGSEXAMPLE_SUCCESS 0
#define STRINGSEXAMPLE_ERROR_NOTIMPLEMENTED 1 /** functionality not implemented */
#define STRINGSEXAMPLE_ERROR_INVALIDPARAM 2 /** an invalid parameter was passed */
#define STRINGSEXAMPLE_ERROR_INVALIDCAST 3 /** a type cast failed */
#define STRINGSEXAMPLE_ERROR_BUFFERTOOSMALL 4 /** a provided buffer is too small */
#define STRINGSEXAMPLE_ERROR_GENERICEXCEPTION 5 /** a generic exception occurred */
#define STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY 6 /** the library could not be loaded */
#define STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT 7 /** a required exported symbol could not be found in the library */
#define STRINGSEXAMPLE_ERROR_INCOMPATIBLEBINARYVERSION 8 /** the version of the binary interface does not match the bindings interface */

/*************************************************************************************************************************
 Error strings for StringsExample
**************************************************************************************************************************/

inline const char * STRINGSEXAMPLE_GETERRORSTRING (StringsExampleResult nErrorCode) {
  switch (nErrorCode) {
    case STRINGSEXAMPLE_SUCCESS: return "no error";
    case STRINGSEXAMPLE_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
    case STRINGSEXAMPLE_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
    case STRINGSEXAMPLE_ERROR_INVALIDCAST: return "a type cast failed";
    case STRINGSEXAMPLE_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
    case STRINGSEXAMPLE_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
    case STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
    case STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
    case STRINGSEXAMPLE_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
    default: return "unknown error";
  }
}

/*************************************************************************************************************************
 Declaration of handle classes 
**************************************************************************************************************************/

typedef StringsExampleHandle StringsExample_Base;
typedef StringsExampleHandle StringsExample_StringObject;

namespace StringsExample {

} // namespace StringsExample;

// define legacy C-names for enums, structs and function types

#endif // __STRINGSEXAMPLE_TYPES_HEADER_CPP
