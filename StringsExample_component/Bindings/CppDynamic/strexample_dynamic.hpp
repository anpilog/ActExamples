/*++

Copyright (C) 2021 Strings developers

All rights reserved.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated C++-Header file in order to allow an easy
 use of String example library

Interface version: 1.0.0

*/

#ifndef __STRINGSEXAMPLE_CPPHEADER_DYNAMIC_CPP
#define __STRINGSEXAMPLE_CPPHEADER_DYNAMIC_CPP

#include "strexample_types.hpp"
#include "strexample_dynamic.h"


#ifdef _WIN32
#include <windows.h>
#else // _WIN32
#include <dlfcn.h>
#endif // _WIN32
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace StringsExample {

/*************************************************************************************************************************
 Forward Declaration of all classes
**************************************************************************************************************************/
class CWrapper;
class CBase;
class CStringObject;

/*************************************************************************************************************************
 Declaration of deprecated class types
**************************************************************************************************************************/
typedef CWrapper CStringsExampleWrapper;
typedef CBase CStringsExampleBase;
typedef CStringObject CStringsExampleStringObject;

/*************************************************************************************************************************
 Declaration of shared pointer types
**************************************************************************************************************************/
typedef std::shared_ptr<CWrapper> PWrapper;
typedef std::shared_ptr<CBase> PBase;
typedef std::shared_ptr<CStringObject> PStringObject;

/*************************************************************************************************************************
 Declaration of deprecated shared pointer types
**************************************************************************************************************************/
typedef PWrapper PStringsExampleWrapper;
typedef PBase PStringsExampleBase;
typedef PStringObject PStringsExampleStringObject;


/*************************************************************************************************************************
 classParam Definition
**************************************************************************************************************************/

template<class T> class classParam {
private:
	const T* m_ptr;

public:
	classParam(const T* ptr)
		: m_ptr (ptr)
	{
	}

	classParam(std::shared_ptr <T> sharedPtr)
		: m_ptr (sharedPtr.get())
	{
	}

	StringsExampleHandle GetHandle()
	{
		if (m_ptr != nullptr)
			return m_ptr->handle();
		return nullptr;
	}
};

/*************************************************************************************************************************
 Class EStringsExampleException 
**************************************************************************************************************************/
class EStringsExampleException : public std::exception {
protected:
	/**
	* Error code for the Exception.
	*/
	StringsExampleResult m_errorCode;
	/**
	* Error message for the Exception.
	*/
	std::string m_errorMessage;
	std::string m_originalErrorMessage;

public:
	/**
	* Exception Constructor.
	*/
	EStringsExampleException(StringsExampleResult errorCode, const std::string & sErrorMessage)
		: m_errorCode(errorCode), m_originalErrorMessage(sErrorMessage)
	{
		m_errorMessage = buildErrorMessage();
	}

	/**
	* Returns error code
	*/
	StringsExampleResult getErrorCode() const noexcept
	{
		return m_errorCode;
	}

	/**
	* Returns error message
	*/
	const char* what() const noexcept
	{
		return m_errorMessage.c_str();
	}

	const char* getErrorMessage() const noexcept
	{
		return m_originalErrorMessage.c_str();
	}

	const char* getErrorName() const noexcept
	{
		switch(getErrorCode()) {
			case STRINGSEXAMPLE_SUCCESS: return "SUCCESS";
			case STRINGSEXAMPLE_ERROR_NOTIMPLEMENTED: return "NOTIMPLEMENTED";
			case STRINGSEXAMPLE_ERROR_INVALIDPARAM: return "INVALIDPARAM";
			case STRINGSEXAMPLE_ERROR_INVALIDCAST: return "INVALIDCAST";
			case STRINGSEXAMPLE_ERROR_BUFFERTOOSMALL: return "BUFFERTOOSMALL";
			case STRINGSEXAMPLE_ERROR_GENERICEXCEPTION: return "GENERICEXCEPTION";
			case STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY: return "COULDNOTLOADLIBRARY";
			case STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "COULDNOTFINDLIBRARYEXPORT";
			case STRINGSEXAMPLE_ERROR_INCOMPATIBLEBINARYVERSION: return "INCOMPATIBLEBINARYVERSION";
		}
		return "UNKNOWN";
	}

	const char* getErrorDescription() const noexcept
	{
		switch(getErrorCode()) {
			case STRINGSEXAMPLE_SUCCESS: return "success";
			case STRINGSEXAMPLE_ERROR_NOTIMPLEMENTED: return "functionality not implemented";
			case STRINGSEXAMPLE_ERROR_INVALIDPARAM: return "an invalid parameter was passed";
			case STRINGSEXAMPLE_ERROR_INVALIDCAST: return "a type cast failed";
			case STRINGSEXAMPLE_ERROR_BUFFERTOOSMALL: return "a provided buffer is too small";
			case STRINGSEXAMPLE_ERROR_GENERICEXCEPTION: return "a generic exception occurred";
			case STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY: return "the library could not be loaded";
			case STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT: return "a required exported symbol could not be found in the library";
			case STRINGSEXAMPLE_ERROR_INCOMPATIBLEBINARYVERSION: return "the version of the binary interface does not match the bindings interface";
		}
		return "unknown error";
	}

private:

	std::string buildErrorMessage() const noexcept
	{
		std::string msg = m_originalErrorMessage;
		if (msg.empty()) {
			msg = getErrorDescription();
		}
		return std::string("Error: ") + getErrorName() + ": " + msg;
	}
};

/*************************************************************************************************************************
 Class CInputVector
**************************************************************************************************************************/
template <typename T>
class CInputVector {
private:
	
	const T* m_data;
	size_t m_size;
	
public:
	
	explicit CInputVector( const std::vector<T>& vec)
		: m_data( vec.data() ), m_size( vec.size() )
	{
	}
	
	CInputVector( const T* in_data, size_t in_size)
		: m_data( in_data ), m_size(in_size )
	{
	}
	
	const T* data() const
	{
		return m_data;
	}
	
	size_t size() const
	{
		return m_size;
	}
	
};

// declare deprecated class name
template<typename T>
using CStringsExampleInputVector = CInputVector<T>;

/*************************************************************************************************************************
 Class CWrapper 
**************************************************************************************************************************/
class CWrapper {
public:
	
	explicit CWrapper(void* pSymbolLookupMethod)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTableFromSymbolLookupMethod(&m_WrapperTable, pSymbolLookupMethod));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	explicit CWrapper(const std::string &sFileName)
	{
		CheckError(nullptr, initWrapperTable(&m_WrapperTable));
		CheckError(nullptr, loadWrapperTable(&m_WrapperTable, sFileName.c_str()));
		
		CheckError(nullptr, checkBinaryVersion());
	}
	
	static PWrapper loadLibrary(const std::string &sFileName)
	{
		return std::make_shared<CWrapper>(sFileName);
	}
	
	static PWrapper loadLibraryFromSymbolLookupMethod(void* pSymbolLookupMethod)
	{
		return std::make_shared<CWrapper>(pSymbolLookupMethod);
	}
	
	~CWrapper()
	{
		releaseWrapperTable(&m_WrapperTable);
	}
	
	inline void CheckError(CBase * pBaseClass, StringsExampleResult nResult);

	inline void GetVersion(StringsExample_uint32 & nMajor, StringsExample_uint32 & nMinor, StringsExample_uint32 & nMicro);
	inline bool GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage);
	inline void ReleaseInstance(classParam<CBase> pInstance);
	inline void AcquireInstance(classParam<CBase> pInstance);
	inline PStringObject CreateStringObject();

private:
	sStringsExampleDynamicWrapperTable m_WrapperTable;
	
	StringsExampleResult checkBinaryVersion()
	{
		StringsExample_uint32 nMajor, nMinor, nMicro;
		GetVersion(nMajor, nMinor, nMicro);
		if (nMajor != STRINGSEXAMPLE_VERSION_MAJOR) {
			return STRINGSEXAMPLE_ERROR_INCOMPATIBLEBINARYVERSION;
		}
		return STRINGSEXAMPLE_SUCCESS;
	}
	StringsExampleResult initWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable);
	StringsExampleResult releaseWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable);
	StringsExampleResult loadWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName);
	StringsExampleResult loadWrapperTableFromSymbolLookupMethod(sStringsExampleDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod);

	friend class CBase;
	friend class CStringObject;

};

	
/*************************************************************************************************************************
 Class CBase 
**************************************************************************************************************************/
class CBase {
public:
	
protected:
	/* Wrapper Object that created the class. */
	CWrapper * m_pWrapper;
	/* Handle to Instance in library*/
	StringsExampleHandle m_pHandle;

	/* Checks for an Error code and raises Exceptions */
	void CheckError(StringsExampleResult nResult)
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->CheckError(this, nResult);
	}
public:
	/**
	* CBase::CBase - Constructor for Base class.
	*/
	CBase(CWrapper * pWrapper, StringsExampleHandle pHandle)
		: m_pWrapper(pWrapper), m_pHandle(pHandle)
	{
	}

	/**
	* CBase::~CBase - Destructor for Base class.
	*/
	virtual ~CBase()
	{
		if (m_pWrapper != nullptr)
			m_pWrapper->ReleaseInstance(this);
		m_pWrapper = nullptr;
	}

	/**
	* CBase::handle - Returns handle to instance.
	*/
	StringsExampleHandle handle() const
	{
		return m_pHandle;
	}

	/**
	* CBase::wrapper - Returns wrapper instance.
	*/
	CWrapper * wrapper() const
	{
		return m_pWrapper;
	}
	
	friend class CWrapper;
};
	
/*************************************************************************************************************************
 Class CStringObject 
**************************************************************************************************************************/
class CStringObject : public CBase {
public:
	
	/**
	* CStringObject::CStringObject - Constructor for StringObject class.
	*/
	CStringObject(CWrapper* pWrapper, StringsExampleHandle pHandle)
		: CBase(pWrapper, pHandle)
	{
	}
	
	inline PStringObject GetMyStringObject(std::string & sName);
};
	
	/**
	* CWrapper::GetVersion - retrieves the binary version of this library.
	* @param[out] nMajor - returns the major version of this library
	* @param[out] nMinor - returns the minor version of this library
	* @param[out] nMicro - returns the micro version of this library
	*/
	inline void CWrapper::GetVersion(StringsExample_uint32 & nMajor, StringsExample_uint32 & nMinor, StringsExample_uint32 & nMicro)
	{
		CheckError(nullptr,m_WrapperTable.m_GetVersion(&nMajor, &nMinor, &nMicro));
	}
	
	/**
	* CWrapper::GetLastError - Returns the last error recorded on this object
	* @param[in] pInstance - Instance Handle
	* @param[out] sErrorMessage - Message of the last error
	* @return Is there a last error to query
	*/
	inline bool CWrapper::GetLastError(classParam<CBase> pInstance, std::string & sErrorMessage)
	{
		StringsExampleHandle hInstance = pInstance.GetHandle();
		StringsExample_uint32 bytesNeededErrorMessage = 0;
		StringsExample_uint32 bytesWrittenErrorMessage = 0;
		bool resultHasError = 0;
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, 0, &bytesNeededErrorMessage, nullptr, &resultHasError));
		std::vector<char> bufferErrorMessage(bytesNeededErrorMessage);
		CheckError(nullptr,m_WrapperTable.m_GetLastError(hInstance, bytesNeededErrorMessage, &bytesWrittenErrorMessage, &bufferErrorMessage[0], &resultHasError));
		sErrorMessage = std::string(&bufferErrorMessage[0]);
		
		return resultHasError;
	}
	
	/**
	* CWrapper::ReleaseInstance - Releases shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::ReleaseInstance(classParam<CBase> pInstance)
	{
		StringsExampleHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_ReleaseInstance(hInstance));
	}
	
	/**
	* CWrapper::AcquireInstance - Acquires shared ownership of an Instance
	* @param[in] pInstance - Instance Handle
	*/
	inline void CWrapper::AcquireInstance(classParam<CBase> pInstance)
	{
		StringsExampleHandle hInstance = pInstance.GetHandle();
		CheckError(nullptr,m_WrapperTable.m_AcquireInstance(hInstance));
	}
	
	/**
	* CWrapper::CreateStringObject - Creates a new Variable instance
	* @return New Variable instance
	*/
	inline PStringObject CWrapper::CreateStringObject()
	{
		StringsExampleHandle hInstance = nullptr;
		CheckError(nullptr,m_WrapperTable.m_CreateStringObject(&hInstance));
		
		if (!hInstance) {
			CheckError(nullptr,STRINGSEXAMPLE_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CStringObject>(this, hInstance);
	}
	
	inline void CWrapper::CheckError(CBase * pBaseClass, StringsExampleResult nResult)
	{
		if (nResult != 0) {
			std::string sErrorMessage;
			if (pBaseClass != nullptr) {
				GetLastError(pBaseClass, sErrorMessage);
			}
			throw EStringsExampleException(nResult, sErrorMessage);
		}
	}
	

	inline StringsExampleResult CWrapper::initWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		
		pWrapperTable->m_LibraryHandle = nullptr;
		pWrapperTable->m_StringObject_GetMyStringObject = nullptr;
		pWrapperTable->m_GetVersion = nullptr;
		pWrapperTable->m_GetLastError = nullptr;
		pWrapperTable->m_ReleaseInstance = nullptr;
		pWrapperTable->m_AcquireInstance = nullptr;
		pWrapperTable->m_CreateStringObject = nullptr;
		
		return STRINGSEXAMPLE_SUCCESS;
	}

	inline StringsExampleResult CWrapper::releaseWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable)
	{
		if (pWrapperTable == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		
		if (pWrapperTable->m_LibraryHandle != nullptr) {
		#ifdef _WIN32
			HMODULE hModule = (HMODULE) pWrapperTable->m_LibraryHandle;
			FreeLibrary(hModule);
		#else // _WIN32
			dlclose(pWrapperTable->m_LibraryHandle);
		#endif // _WIN32
			return initWrapperTable(pWrapperTable);
		}
		
		return STRINGSEXAMPLE_SUCCESS;
	}

	inline StringsExampleResult CWrapper::loadWrapperTable(sStringsExampleDynamicWrapperTable * pWrapperTable, const char * pLibraryFileName)
	{
		if (pWrapperTable == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		if (pLibraryFileName == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		
		#ifdef _WIN32
		// Convert filename to UTF16-string
		int nLength = static_cast<int>(strnlen_s(pLibraryFileName, MAX_PATH));
		int nBufferSize = nLength * 2 + 2;
		std::vector<wchar_t> wsLibraryFileName(nBufferSize);
		int nResult = MultiByteToWideChar(CP_UTF8, 0, pLibraryFileName, nLength, &wsLibraryFileName[0], nBufferSize);
		if (nResult == 0)
			return STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY;
		
		HMODULE hLibrary = LoadLibraryW(wsLibraryFileName.data());
		if (hLibrary == 0) 
			return STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY;
		#else // _WIN32
		void* hLibrary = dlopen(pLibraryFileName, RTLD_LAZY);
		if (hLibrary == 0) 
			return STRINGSEXAMPLE_ERROR_COULDNOTLOADLIBRARY;
		dlerror();
		#endif // _WIN32
		
		#ifdef _WIN32
		pWrapperTable->m_StringObject_GetMyStringObject = (PStringsExampleStringObject_GetMyStringObjectPtr) GetProcAddress(hLibrary, "stringsexample_stringobject_getmystringobject");
		#else // _WIN32
		pWrapperTable->m_StringObject_GetMyStringObject = (PStringsExampleStringObject_GetMyStringObjectPtr) dlsym(hLibrary, "stringsexample_stringobject_getmystringobject");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_StringObject_GetMyStringObject == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetVersion = (PStringsExampleGetVersionPtr) GetProcAddress(hLibrary, "stringsexample_getversion");
		#else // _WIN32
		pWrapperTable->m_GetVersion = (PStringsExampleGetVersionPtr) dlsym(hLibrary, "stringsexample_getversion");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetVersion == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_GetLastError = (PStringsExampleGetLastErrorPtr) GetProcAddress(hLibrary, "stringsexample_getlasterror");
		#else // _WIN32
		pWrapperTable->m_GetLastError = (PStringsExampleGetLastErrorPtr) dlsym(hLibrary, "stringsexample_getlasterror");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_GetLastError == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_ReleaseInstance = (PStringsExampleReleaseInstancePtr) GetProcAddress(hLibrary, "stringsexample_releaseinstance");
		#else // _WIN32
		pWrapperTable->m_ReleaseInstance = (PStringsExampleReleaseInstancePtr) dlsym(hLibrary, "stringsexample_releaseinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_ReleaseInstance == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_AcquireInstance = (PStringsExampleAcquireInstancePtr) GetProcAddress(hLibrary, "stringsexample_acquireinstance");
		#else // _WIN32
		pWrapperTable->m_AcquireInstance = (PStringsExampleAcquireInstancePtr) dlsym(hLibrary, "stringsexample_acquireinstance");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_AcquireInstance == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		#ifdef _WIN32
		pWrapperTable->m_CreateStringObject = (PStringsExampleCreateStringObjectPtr) GetProcAddress(hLibrary, "stringsexample_createstringobject");
		#else // _WIN32
		pWrapperTable->m_CreateStringObject = (PStringsExampleCreateStringObjectPtr) dlsym(hLibrary, "stringsexample_createstringobject");
		dlerror();
		#endif // _WIN32
		if (pWrapperTable->m_CreateStringObject == nullptr)
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		pWrapperTable->m_LibraryHandle = hLibrary;
		return STRINGSEXAMPLE_SUCCESS;
	}

	inline StringsExampleResult CWrapper::loadWrapperTableFromSymbolLookupMethod(sStringsExampleDynamicWrapperTable * pWrapperTable, void* pSymbolLookupMethod)
{
		if (pWrapperTable == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		if (pSymbolLookupMethod == nullptr)
			return STRINGSEXAMPLE_ERROR_INVALIDPARAM;
		
		typedef StringsExampleResult(*SymbolLookupType)(const char*, void**);
		
		SymbolLookupType pLookup = (SymbolLookupType)pSymbolLookupMethod;
		
		StringsExampleResult eLookupError = STRINGSEXAMPLE_SUCCESS;
		eLookupError = (*pLookup)("stringsexample_stringobject_getmystringobject", (void**)&(pWrapperTable->m_StringObject_GetMyStringObject));
		if ( (eLookupError != 0) || (pWrapperTable->m_StringObject_GetMyStringObject == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("stringsexample_getversion", (void**)&(pWrapperTable->m_GetVersion));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetVersion == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("stringsexample_getlasterror", (void**)&(pWrapperTable->m_GetLastError));
		if ( (eLookupError != 0) || (pWrapperTable->m_GetLastError == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("stringsexample_releaseinstance", (void**)&(pWrapperTable->m_ReleaseInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_ReleaseInstance == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("stringsexample_acquireinstance", (void**)&(pWrapperTable->m_AcquireInstance));
		if ( (eLookupError != 0) || (pWrapperTable->m_AcquireInstance == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		eLookupError = (*pLookup)("stringsexample_createstringobject", (void**)&(pWrapperTable->m_CreateStringObject));
		if ( (eLookupError != 0) || (pWrapperTable->m_CreateStringObject == nullptr) )
			return STRINGSEXAMPLE_ERROR_COULDNOTFINDLIBRARYEXPORT;
		
		return STRINGSEXAMPLE_SUCCESS;
}

	
	
	/**
	 * Method definitions for class CBase
	 */
	
	/**
	 * Method definitions for class CStringObject
	 */
	
	/**
	* CStringObject::GetMyStringObject - Return incapsulated object
	* @param[out] sName - Pass some strong to trigger cached parameters name.
	* @return Fails in compilation
	*/
	PStringObject CStringObject::GetMyStringObject(std::string & sName)
	{
		StringsExample_uint32 bytesNeededName = 0;
		StringsExample_uint32 bytesWrittenName = 0;
		StringsExampleHandle hResult = nullptr;
		CheckError(m_pWrapper->m_WrapperTable.m_StringObject_GetMyStringObject(m_pHandle, 0, &bytesNeededName, nullptr, &hResult));
		std::vector<char> bufferName(bytesNeededName);
		CheckError(m_pWrapper->m_WrapperTable.m_StringObject_GetMyStringObject(m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0], &hResult));
		sName = std::string(&bufferName[0]);
		
		if (!hResult) {
			CheckError(STRINGSEXAMPLE_ERROR_INVALIDPARAM);
		}
		return std::make_shared<CStringObject>(m_pWrapper, hResult);
	}

} // namespace StringsExample

#endif // __STRINGSEXAMPLE_CPPHEADER_DYNAMIC_CPP

